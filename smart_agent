# -*- coding: utf-8 -*-
__author__ = 'evtushenko'
import random
import math
import os

import numpy as np
import pandas as pd

from pysc2.agents import base_agent
from pysc2.lib import actions
from pysc2.lib import features

actions_count = len(actions.FUNCTIONS._func_list)
func_list = range(actions_count)

_NO_OP = actions.FUNCTIONS.no_op.id
_SELECT_POINT = actions.FUNCTIONS.select_point.id
_BUILD_SUPPLY_DEPOT = actions.FUNCTIONS.Build_SupplyDepot_screen.id
_BUILD_BARRACKS = actions.FUNCTIONS.Build_Barracks_screen.id
_TRAIN_MARINE = actions.FUNCTIONS.Train_Marine_quick.id
_SELECT_ARMY = actions.FUNCTIONS.select_army.id
_ATTACK_MINIMAP = actions.FUNCTIONS.Attack_minimap.id

_PLAYER_RELATIVE = features.SCREEN_FEATURES.player_relative.index
_UNIT_TYPE = features.SCREEN_FEATURES.unit_type.index
_PLAYER_ID = features.SCREEN_FEATURES.player_id.index

_PLAYER_SELF = 1
_PLAYER_HOSTILE = 4

_TERRAN_COMMANDCENTER = 18
_TERRAN_SCV = 45
_TERRAN_SUPPLY_DEPOT = 19
_TERRAN_BARRACKS = 21

_NOT_QUEUED = [0]
_QUEUED = [1]

smart_actions = func_list

#for mm_x in range(0, 64):
#    for mm_y in range(0, 64):
#        if (mm_x + 1) % 16 == 0 and (mm_y + 1) % 16 == 0:
#            smart_actions.append(ACTION_ATTACK + '_' + str(mm_x - 8) + '_' + str(mm_y - 8))

KILL_UNIT_REWARD = 2
KILL_BUILDING_REWARD = 5
BUILD_UNIT_REWARD = 2
SUPPLY_LIMIT_REWARD = 1
BUILD_BUILDING_REWARD = 1
SPEND_RESOURCES_REWARD = 2
DO_NOTHING_REWARD = -1
NOT_AVAILABLE_REWARD = -10

# Stolen from https://github.com/MorvanZhou/Reinforcement-learning-with-tensorflow
class QLearningTable:
    def __init__(self, actions, learning_rate=0.01, reward_decay=0.9, e_greedy=0.9):
        self.actions = actions  # a list
        self.lr = learning_rate
        self.gamma = reward_decay
        self.epsilon = e_greedy
        self.q_table = pd.read_csv('SC2Bot.csv', index_col='state') if os.path.isfile('SC2Bot.csv') else pd.DataFrame(columns=self.actions, dtype=np.float64)
        self.q_table.index.name = 'state'

    def choose_action(self, observation, available_actions, previous_state):
        self.check_state_exist(observation)
        self.check_state_exist(previous_state)

        # filtering available actions
        state_action = self.q_table.ix[observation, available_actions]


        if np.random.uniform() < self.epsilon:
            # some actions have the same value
            state_action = state_action.reindex(np.random.permutation(state_action.index))
            # choose best action
            action = state_action.idxmax()
            if int(action) not in available_actions and previous_state:
                r = NOT_AVAILABLE_REWARD
                self.learn(previous_state, action, r, observation)
                print('NOT_AVAILABLE_REWARD:', r, action)

        else:
            # choose random action
            action = np.random.choice(state_action)
            if int(action) not in available_actions and previous_state:
                r = NOT_AVAILABLE_REWARD
                self.learn(previous_state, action, r, observation)
                print('RANDOM NOT_AVAILABLE_REWARD:', r, action)


        return int(action)

    def learn(self, s, a, r, s_):
        self.check_state_exist(s_)
        self.check_state_exist(s)

        q_predict = self.q_table.ix[s, a]
        q_target = r + self.gamma * self.q_table.ix[s_, :].max()

        # update
        self.q_table.ix[s, a] += self.lr * (q_target - q_predict)

        # save q_table to csv
        self.q_table.to_csv('SC2Bot.csv')

    def check_state_exist(self, state):
        if state not in self.q_table.index:
            # append new state to q table
            self.q_table = self.q_table.append(pd.Series([0] * len(self.actions), index=self.q_table.columns, name=state))

class AttackAgent(base_agent.BaseAgent):
    def __init__(self):
        super(AttackAgent, self).__init__()

        self.qlearn = QLearningTable(actions=func_list)

        self.previous_killed_unit_score = 0
        self.previous_killed_building_score = 0
        self.previous_army_supply = 0
        self.previous_supply_limit = 15
        self.previous_barracks_count =0

        self.previous_action = None
        self.previous_state = None

    def transformDistance(self, x, x_distance, y, y_distance):
        if not self.base_top_left:
            return [abs(x - x_distance), abs(y - y_distance)]

        return [x + x_distance, y + y_distance]

    def enemyLocation(self, x, y):

        return [abs(64 - x), abs(64 - y)]
        #return [np.random.randint(0, 63), np.random.randint(0, 63)]

    def step(self, obs):
        super(AttackAgent, self).step(obs)

        reward = 0

        player_y, player_x = (obs.observation['minimap'][_PLAYER_RELATIVE] == _PLAYER_SELF).nonzero()
        self.base_top_left = 1 if player_y.any() and player_y.mean() <= 31 else 0

        unit_type = obs.observation['screen'][_UNIT_TYPE]

        depot_y, depot_x = (unit_type == _TERRAN_SUPPLY_DEPOT).nonzero()
        supply_depot_count = 1 if depot_y.any() else 0

        barracks_y, barracks_x = (unit_type == _TERRAN_BARRACKS).nonzero()
        barracks_count = 1 if barracks_y.any() else 0

        minerals_now = obs.observation['player'][1]
        gas_now = obs.observation['player'][1]
        supply_now = obs.observation['player'][3]
        supply_limit = obs.observation['player'][4]
        army_supply = obs.observation['player'][5]
        workers_supply = obs.observation['player'][6]
        workers_free = obs.observation['player'][7]
        army_f2 = obs.observation['player'][8]

        killed_unit_score = obs.observation['score_cumulative'][5]
        killed_building_score = obs.observation['score_cumulative'][6]
        resource_mined = obs.observation['score_cumulative'][7]
        resource_spend = obs.observation['score_cumulative'][11]

        current_state = np.zeros((4,), dtype=np.int)
        current_state[0] = supply_depot_count
        current_state[1] = barracks_count
        current_state[2] = supply_limit
        current_state[3] = army_supply
        #current_state[4] = self.previous_action or 0

        hot_squares = np.zeros((16,), dtype=np.int)
        enemy_y, enemy_x = (obs.observation['minimap'][_PLAYER_RELATIVE] == _PLAYER_HOSTILE).nonzero()
        for i in range(0, len(enemy_y)):
            y = int(math.ceil((enemy_y[i] + 1) / 16))
            x = int(math.ceil((enemy_x[i] + 1) / 16))

            hot_squares[((y - 1) * 4) + (x - 1)] = 1

        if not self.base_top_left:
            hot_squares = hot_squares[::-1]


        rl_action = self.qlearn.choose_action(str(current_state), obs.observation['available_actions'], str(self.previous_state))
        smart_action = smart_actions[rl_action]
        print(actions.FUNCTIONS._func_list[smart_action].name)


        if self.previous_action is not None:

            if killed_unit_score > self.previous_killed_unit_score: #and smart_action == ACTION_ATTACK:
                reward += KILL_UNIT_REWARD
                print('KILL_UNIT_REWARD:',reward,smart_action)

            if killed_building_score > self.previous_killed_building_score: #and smart_action == ACTION_ATTACK:
                reward += KILL_BUILDING_REWARD
                print('KILL_BUILDING_REWARD:',reward)

            if smart_action == _NO_OP:
                reward += DO_NOTHING_REWARD
                print('DO_NOTHING_REWARD:',reward)

            if army_supply > self.previous_army_supply: #and smart_action == _TRAIN_MARINE
                reward += BUILD_UNIT_REWARD
                print('BUILD_UNIT_REWARD:',reward,smart_action)

            if supply_limit <= supply_now+3 and smart_action == _BUILD_SUPPLY_DEPOT:
                reward += SUPPLY_LIMIT_REWARD
                print('SUPPLY_LIMIT_REWARD:',reward)

            if barracks_count > self.previous_barracks_count and smart_action == _BUILD_BARRACKS:
                reward += BUILD_BUILDING_REWARD
                print('BUILD_BUILDING_REWARD:',reward)

            self.qlearn.learn(str(self.previous_state), self.previous_action, reward, str(current_state))

        self.previous_killed_unit_score = killed_unit_score
        self.previous_killed_building_score = killed_building_score
        self.previous_army_supply = army_supply
        self.previous_supply_limit = supply_limit
        self.previous_barracks_count = barracks_count


        self.previous_state = current_state
        self.previous_action = rl_action

        x = 0
        y = 0

        if smart_action == _NO_OP:
            return actions.FunctionCall(_NO_OP, [])

        elif smart_action == 2:
            unit_type = obs.observation['screen'][_UNIT_TYPE]
            unit_y, unit_x = (unit_type == _TERRAN_SCV).nonzero()

            if unit_y.any():
                i = random.randint(0, len(unit_y) - 1)
                target = [unit_x[i], unit_y[i]]

                return actions.FunctionCall(_SELECT_POINT, [_NOT_QUEUED, target])

        elif smart_action == _BUILD_SUPPLY_DEPOT:
            if _BUILD_SUPPLY_DEPOT in obs.observation['available_actions']:
                unit_type = obs.observation['screen'][_UNIT_TYPE]
                unit_y, unit_x = (unit_type == _TERRAN_COMMANDCENTER).nonzero()

                if unit_y.any():
                    target = self.transformDistance(int(unit_x.mean()), 0, int(unit_y.mean()), 20)

                    return actions.FunctionCall(_BUILD_SUPPLY_DEPOT, [_NOT_QUEUED, target])

        elif smart_action == _BUILD_BARRACKS:
            if _BUILD_BARRACKS in obs.observation['available_actions']:
                unit_type = obs.observation['screen'][_UNIT_TYPE]
                unit_y, unit_x = (unit_type == _TERRAN_COMMANDCENTER).nonzero()

                if unit_y.any():
                    target = self.transformDistance(int(unit_x.mean()), 20, int(unit_y.mean()), 0)

                    return actions.FunctionCall(_BUILD_BARRACKS, [_NOT_QUEUED, target])

        elif smart_action == _TERRAN_BARRACKS:
            unit_type = obs.observation['screen'][_UNIT_TYPE]
            unit_y, unit_x = (unit_type == _TERRAN_BARRACKS).nonzero()

            if unit_y.any():
                target = [int(unit_x.mean()), int(unit_y.mean())]

                return actions.FunctionCall(_SELECT_POINT, [_NOT_QUEUED, target])

        elif smart_action == _TRAIN_MARINE:
            if _TRAIN_MARINE in obs.observation['available_actions']:
                return actions.FunctionCall(_TRAIN_MARINE, [_QUEUED])

        elif smart_action == _SELECT_ARMY:
            if _SELECT_ARMY in obs.observation['available_actions']:
                return actions.FunctionCall(_SELECT_ARMY, [_NOT_QUEUED])

        elif smart_action == _ATTACK_MINIMAP:
            if obs.observation['single_select'][0][0] != _TERRAN_SCV and _ATTACK_MINIMAP in obs.observation["available_actions"]:
                target = self.enemyLocation(player_x.any(),player_y.any())
                return actions.FunctionCall(_ATTACK_MINIMAP, [_NOT_QUEUED, target])

        return actions.FunctionCall(_NO_OP, [])
